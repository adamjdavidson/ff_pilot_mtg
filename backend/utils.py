"""
Utility functions for the AI Meeting Assistant.
Contains shared functions for formatting and standardizing agent outputs.
"""
import logging

# Get the logger instance configured in main.py
logger = logging.getLogger("main")

async def format_agent_response(agent_name: str, content: str, broadcaster: callable, type: str = "insight"):
    """
    Standardized formatting for all agent responses.
    
    Args:
        agent_name: Name of the agent generating the response
        content: The raw content generated by the agent
        broadcaster: Function to broadcast the response
        type: Type of response (insight or error)
    """
    try:
        if type == "error":
            # For errors, log them but don't send a card to the frontend
            logger.warning(f"[{agent_name}] Error occurred: {content}")
            # Instead of sending an error card, send a special message type that the frontend can handle differently
            # The frontend should not display this as a card
            silent_error_data = {
                "type": "silent_error",  # This type should be ignored by the frontend card rendering
                "agent": agent_name,
                "message": content
            }
            await broadcaster(silent_error_data)
            logger.info(f"[{agent_name}] Silent error notification sent")
        else:
            # For insights, use standardized format
            insight_data = {
                "type": "insight",
                "agent": agent_name,
                "content": content
            }
            # Broadcast the formatted insight
            await broadcaster(insight_data)
            logger.info(f"[{agent_name}] Insight broadcast sent")
        
    except Exception as e:
        logger.error(f"[{agent_name}] Error broadcasting formatted response: {e}")
        logger.exception("Traceback:")
        try:
            # Try to report the error silently
            await broadcaster({
                "type": "silent_error",
                "agent": agent_name,
                "message": f"Error formatting response: {e}"
            })
        except Exception as broadcast_err:
            logger.error(f"[{agent_name}] Failed to broadcast error notification: {broadcast_err}")

# Example standardized prompts that all agents can use
STANDARDIZED_PROMPT_FORMAT = """
Based on the transcript segment, provide:

1. A concise headline (5-7 words) that clearly describes the core idea
2. A brief summary (1-2 sentences, max 25 words)
3. Detailed analysis that includes {specific_content}

**Format your response like this:**

[Your headline here - IMPORTANT: Replace this with your actual headline text, do NOT include square brackets]

[Your summary here - IMPORTANT: Replace this with your actual summary text, do NOT include square brackets]

**Detailed Analysis:**
[Your detailed analysis here - IMPORTANT: Replace this with your actual analysis text, do NOT include square brackets]

CRITICAL: Make sure to remove ALL placeholder text including the square brackets in your final response!
"""
"""
Utility functions for the AI Meeting Assistant.
Contains shared functions for formatting and standardizing agent outputs.
"""
import logging
import os
import re

# Get the logger instance configured in main.py
logger = logging.getLogger("main")

# Agent prompt extraction function - doesn't modify original files
def extract_agent_prompt(agent_name):
    """
    Extracts the prompt text from an agent file without modifying it.
    Returns the raw prompt text in human-readable form.
    """
    # Map agent names to their file names
    agent_files = {
        "Radical Expander": "radical_expander.py",
        "Product Agent": "product_agent.py",
        "Debate Agent": "debate_agent.py", 
        "Skeptical Agent": "skeptical_agent.py",
        "Next Step Agent": "one_small_thing_agent.py",
        "Disruptor": "disruptor_agent.py",
        "Ethan Mollick": "ethan_mollick_agent.py"
    }
    
    if agent_name not in agent_files:
        logger.error(f"Unknown agent name: {agent_name}")
        return {"error": f"Unknown agent: {agent_name}"}
    
    # File path
    file_path = os.path.join(os.path.dirname(__file__), "agents", agent_files[agent_name])
    
    try:
        # Read the file
        with open(file_path, 'r') as f:
            content = f.read()
            
        # Extract various prompt types (direct_prompt, full_prompt, etc)
        prompt_text = ""
        
        # Check for direct_prompt first (most agents use this)
        if "direct_prompt = f\"\"\"" in content:
            match = re.search(r'direct_prompt = f"""(.*?)"""', content, re.DOTALL)
            if match:
                prompt_text = match.group(1)
        
        # If not found, check for other common patterns
        elif "full_prompt = f\"\"\"" in content:
            match = re.search(r'full_prompt = f"""(.*?)"""', content, re.DOTALL)
            if match:
                prompt_text = match.group(1)
        
        # If still not found, look for any triple-quoted string
        if not prompt_text:
            # Look for any variable assigned to a triple-quoted string
            matches = re.findall(r'(\w+)\s*=\s*f"""(.*?)"""', content, re.DOTALL)
            if matches:
                prompt_text = matches[0][1]  # Get the text part
        
        if not prompt_text:
            return {"error": "No prompt found in agent file"}
            
        return {
            "success": True,
            "prompt_text": prompt_text,
            "agent_name": agent_name
        }
        
    except Exception as e:
        logger.error(f"Error extracting prompt from {file_path}: {str(e)}")
        return {"error": f"Error extracting prompt: {str(e)}"}

async def format_agent_response(agent_name: str, content: str, broadcaster: callable, type: str = "insight"):
    """
    Standardized formatting for all agent responses.
    
    Args:
        agent_name: Name of the agent generating the response
        content: The raw content generated by the agent
        broadcaster: Function to broadcast the response
        type: Type of response (insight or error)
    """
    try:
        if type == "error":
            # For errors, log them but don't send a card to the frontend
            logger.warning(f"[{agent_name}] Error occurred: {content}")
            # Instead of sending an error card, send a special message type that the frontend can handle differently
            # The frontend should not display this as a card
            silent_error_data = {
                "type": "silent_error",  # This type should be ignored by the frontend card rendering
                "agent": agent_name,
                "message": content
            }
            await broadcaster(silent_error_data)
            logger.info(f"[{agent_name}] Silent error notification sent")
        else:
            # For insights, use standardized format
            insight_data = {
                "type": "insight",
                "agent": agent_name,
                "content": content
            }
            # Broadcast the formatted insight
            await broadcaster(insight_data)
            logger.info(f"[{agent_name}] Insight broadcast sent")
        
    except Exception as e:
        logger.error(f"[{agent_name}] Error broadcasting formatted response: {e}")
        logger.exception("Traceback:")
        try:
            # Try to report the error silently
            await broadcaster({
                "type": "silent_error",
                "agent": agent_name,
                "message": f"Error formatting response: {e}"
            })
        except Exception as broadcast_err:
            logger.error(f"[{agent_name}] Failed to broadcast error notification: {broadcast_err}")

# Example standardized prompts that all agents can use
STANDARDIZED_PROMPT_FORMAT = """
Based on the transcript segment, provide:

1. A mind-blowing headline that MUST:
   - Be a complete, grammatically correct sentence with a strong subject and powerful verb
   - Convey a REVOLUTIONARY concept that challenges conventional thinking
   - Sound like a breaking news announcement about a paradigm shift
   - Use sharp, vivid language that captures attention
   - Be 5-10 words maximum

2. A crisp summary that MUST:
   - Expand on the headline with ONE specific, concrete detail
   - Include a surprising statistic or bold claim about impact
   - Be 10-15 words maximum
   - End with a period

3. Detailed analysis that includes {specific_content}

EXAMPLES OF EXCELLENT HEADLINES AND SUMMARIES:

ðŸš€ "AI Twins Replace Middle Management Entirely"
Companies deploying digital replicas report 300% productivity boost and happier employees.

ðŸ”® "Drone Hives Transform Last-Mile Delivery Forever"
Self-organizing swarms deliver packages 10x faster while eliminating 95% of urban congestion.

âš¡ "Neural Implants Revolutionize Knowledge Work Training"
Skills downloaded directly to brain stem cut onboarding from months to minutes.

**Format your response like this:**

[Your headline here - IMPORTANT: Make it REVOLUTIONARY and mind-expanding]

[Your summary here - IMPORTANT: Include a SURPRISING detail or statistic]

**Detailed Analysis:**
[Your detailed analysis here - IMPORTANT: Provide the full mind-blowing vision]

CRITICAL REQUIREMENTS:
- Your headline MUST feel like science fiction that's just barely possible
- Absolutely NO corporate jargon or buzzwords
- Be concrete, specific, and crystal clear
- Make sure your idea is truly revolutionary, not an incremental improvement
- Prioritize ideas that would shock traditional executives
"""